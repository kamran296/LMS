import { jsxs as y, jsx as a } from "react/jsx-runtime";
import u from "react";
import { styled as M } from "@mui/material/styles";
import R from "@mui/material/IconButton";
import b from "@mui/material/InputAdornment";
import U from "@mui/material/TextField";
import G from "@mui/material/Typography";
const Z = [
  "B",
  "kB",
  "MB",
  "GB",
  "TB",
  "PB",
  "EB",
  "ZB",
  "YB"
], _ = [
  "B",
  "KiB",
  "MiB",
  "GiB",
  "TiB",
  "PiB",
  "EiB",
  "ZiB",
  "YiB"
], j = [
  "b",
  "kbit",
  "Mbit",
  "Gbit",
  "Tbit",
  "Pbit",
  "Ebit",
  "Zbit",
  "Ybit"
], O = [
  "b",
  "kibit",
  "Mibit",
  "Gibit",
  "Tibit",
  "Pibit",
  "Eibit",
  "Zibit",
  "Yibit"
], F = (e, i, t) => {
  let n = e;
  return typeof i == "string" || Array.isArray(i) ? n = e.toLocaleString(i, t) : (i === !0 || t !== void 0) && (n = e.toLocaleString(void 0, t)), n;
};
function A(e, i) {
  if (!Number.isFinite(e))
    throw new TypeError(`Expected a finite number, got ${typeof e}: ${e}`);
  i = {
    bits: !1,
    binary: !1,
    space: !0,
    ...i
  };
  const t = i.bits ? i.binary ? O : j : i.binary ? _ : Z, n = i.space ? " " : "";
  if (i.signed && e === 0)
    return ` 0${n}${t[0]}`;
  const l = e < 0, s = l ? "-" : i.signed ? "+" : "";
  l && (e = -e);
  let r;
  if (i.minimumFractionDigits !== void 0 && (r = { minimumFractionDigits: i.minimumFractionDigits }), i.maximumFractionDigits !== void 0 && (r = { maximumFractionDigits: i.maximumFractionDigits, ...r }), e < 1) {
    const p = F(e, i.locale, r);
    return s + p + n + t[0];
  }
  const f = Math.min(Math.floor(i.binary ? Math.log(e) / Math.log(1024) : Math.log10(e) / 3), t.length - 1);
  e /= (i.binary ? 1024 : 1e3) ** f, r || (e = e.toPrecision(3));
  const g = F(Number(e), i.locale, r), d = t[f];
  return s + g + n + d;
}
const W = M("label")`
  position: relative;
  flex-grow: 1;

  input {
    opacity: 0 !important;
  }

  & > span {
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
    z-index: 2;
    display: flex;
    align-items: center;
  }

  span.MuiFileInput-placeholder {
    color: gray;
  }
`, H = M("div")`
  display: flex;
  width: 100%;

  & > span {
    display: block;
  }

  & > span:first-of-type {
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
  }

  & > span:last-of-type {
    flex-shrink: 0;
    display: block;
  }
`, P = {
  Label: W,
  Filename: H
}, K = u.forwardRef(
  (e, i) => {
    const { text: t, isPlaceholder: n, placeholder: l, ...s } = e, r = u.useId();
    return /* @__PURE__ */ y(P.Label, { htmlFor: r, children: [
      /* @__PURE__ */ a("input", { ...s, ref: i, id: r }),
      t ? /* @__PURE__ */ a(
        "span",
        {
          "aria-placeholder": l,
          className: n ? "MuiFileInput-placeholder" : "",
          children: typeof t == "string" ? t : /* @__PURE__ */ y(P.Filename, { children: [
            /* @__PURE__ */ a("span", { children: t.filename }),
            /* @__PURE__ */ y("span", { children: [
              ".",
              t.extension
            ] })
          ] })
        }
      ) : null
    ] });
  }
);
function V(e) {
  return e.length > 0;
}
function q(e) {
  return e.reduce((i, t) => i + t.size, 0);
}
function x(e) {
  return typeof window < "u" && e instanceof File;
}
function J(e) {
  return Array.from(e);
}
function Q(e) {
  const t = (x(e) ? e.name : e[0]?.name || "").split("."), n = t.pop();
  return {
    filename: t.join("."),
    extension: n
  };
}
const X = typeof window < "u" ? u.useLayoutEffect : u.useEffect, st = u.forwardRef(
  (e, i) => {
    const {
      value: t,
      onChange: n,
      disabled: l,
      getInputText: s,
      getSizeText: r,
      placeholder: f,
      hideSizeText: g,
      inputProps: d,
      InputProps: p,
      multiple: I,
      className: N,
      clearIconButtonProps: S = {},
      ...E
    } = e, { className: w = "", ...v } = S, m = u.useRef(null), { startAdornment: C, ...z } = p || {}, L = I || d?.multiple || p?.inputProps?.multiple || !1, B = () => {
      m.current && (m.current.value = "");
    }, D = (o) => {
      const T = o.target.files, h = T ? J(T) : [];
      I ? (n?.(h), h.length === 0 && B()) : (n?.(h[0] || null), h[0] || B());
    }, k = (o) => {
      o.preventDefault(), !l && n?.(I ? [] : null);
    }, c = Array.isArray(t) ? V(t) : x(t);
    X(() => {
      const o = m.current;
      o && !c && (o.value = "");
    }, [c]);
    const $ = () => t === null || Array.isArray(t) && t.length === 0 ? f || "" : typeof s == "function" && t !== void 0 ? s(t) : t && c ? Array.isArray(t) && t.length > 1 ? `${t.length} files` : Q(t) : "", Y = () => {
      if (typeof r == "function" && t !== void 0)
        return r(t);
      if (c) {
        if (Array.isArray(t)) {
          const o = q(t);
          return A(o);
        }
        if (x(t))
          return A(t.size);
      }
      return "";
    };
    return /* @__PURE__ */ a(
      U,
      {
        ref: i,
        type: "file",
        disabled: l,
        onChange: D,
        className: `MuiFileInput-TextField ${N || ""}`,
        InputProps: {
          startAdornment: /* @__PURE__ */ a(b, { position: "start", children: C }),
          endAdornment: /* @__PURE__ */ y(
            b,
            {
              position: "end",
              style: { visibility: c ? "visible" : "hidden" },
              children: [
                g ? null : /* @__PURE__ */ a(
                  G,
                  {
                    variant: "caption",
                    mr: "2px",
                    lineHeight: 1,
                    className: "MuiFileInput-Typography-size-text",
                    children: Y()
                  }
                ),
                /* @__PURE__ */ a(
                  R,
                  {
                    "aria-label": "Clear",
                    title: "Clear",
                    size: "small",
                    disabled: l,
                    className: `${w} MuiFileInput-ClearIconButton`,
                    onClick: k,
                    ...v
                  }
                )
              ]
            }
          ),
          ...z,
          inputProps: {
            text: $(),
            multiple: L,
            ref: m,
            isPlaceholder: !c,
            placeholder: f,
            ...d,
            ...p?.inputProps
          },
          inputComponent: K
        },
        ...E
      }
    );
  }
);
export {
  st as MuiFileInput
};
